{
	"importNoModuleName": {
		"prefix": "imp",
		"body": [
			"import '$1'",
			""
		],
		"description": "import 'module'",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"import": {
		"prefix": "imf",
		"body": [
			"import $2 from '$1'",
			""
		],
		"description": "import moduleName from 'module'",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importEverything": {
		"prefix": "ime",
		"body": [
			"import * as $2 from '$1'",
			""
		],
		"description": "import * as moduleName from 'module'",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importDestructing": {
		"prefix": "imd",
		"body": [
			"import { $2 } from '$1'",
			""
		],
		"description": "import { } from 'module'",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"importAs": {
		"prefix": "imda",
		"body": [
			"import { $2 as $3 } from '$1'",
			""
		],
		"description": "import { originalName  as alias } from 'module'",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
	},



  "consoleLog": {
		"prefix": "clg",
		"body": [
			"console.log(${1:object})$0",
		],
		"description": "Log output to console",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleLogObject": {
		"prefix": "clo",
		"body": [
			"console.log('${1:object}',${1:object})$0",
		],
		"description": "Log output to console",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
	"consoleLogJson": {
		"prefix": "clj",
		"body": [
			"console.log('${1:first}', JSON.stringify(${1:first}, null, 2))"
		],
		"description": "Logs stringified JSON property with name.",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},

  "arrowFunction": {
		"prefix": "nfc",
		"body": [
			"const ${1:name} = (${2:params}) => {",
			"  ${0}",
			"}",
		],
		"description": "Create a named arrow function",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},
  "anonymousArrowFunction": {
		"prefix": "anfc",
		"body": [
			"(${1:params}) => {",
			"  ${0}",
			"}",
		],
		"description": "Create a anonymous arrow function",
		"scope": "typescript,typescriptreact,javascript,javascriptreact"
	},

  "reactFunctionalComponentExport": {
    "prefix": "rfce",
    "body": [
      "import React from 'react'",
      "",
      "function ${1:${TM_FILENAME_BASE}}(props) {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Functional Component with ES7 module system",
    "scope": "javascriptreact"
  },
  "reactFunctionalComponentExportWithTypes": {
    "prefix": "rfce",
    "body": [
      "import React from 'react'",
      "",
      "type ${1:${TM_FILENAME_BASE}}Props = {",
      "  ${2:children}?:${3:ReactNode}",
      "}",
      "function ${1:${TM_FILENAME_BASE}}(props:${1:${TM_FILENAME_BASE}}Props) {",
      "  const { ${2:children} } = props",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Functional Component with ES7 module system",
    "scope": "typescriptreact"
  },


  "useCallback": {
    "prefix": "useCallbackSnippet",
    "body": [
      "useCallback(",
      "  () => {",
      "    ${1:first}",
      "  },",
      "  [${2:second}],",
      ")",
      ""
    ],
    "scope": "typescriptreact,javascriptreact"
  },
  "useContext": {
    "prefix": "useContextSnippet",
    "body": ["const ${1:first} = useContext(${2:second})"],
    "scope": "typescriptreact,javascriptreact"
  },
  "useEffect": {
    "prefix": "useEffectSnippet",
    "body": [
      "useEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  }",
      "}, [${3:third}])",
      ""
    ],
    "scope": "typescriptreact,javascriptreact"
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandleSnippet",
    "body": [
      "useImperativeHandle(",
      "  ${1:first},",
      "  () => {",
      "    ${2:second}",
      "  },",
      "  [${3:third}],",
      ")"
    ],
    "scope": "typescriptreact,javascriptreact"
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffectSnippet",
    "body": [
      "useLayoutEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  };",
      "}, [${3:third}])"
    ],
    "scope": "typescriptreact,javascriptreact"
  },
  "useMemo": {
    "prefix": "useMemoSnippet",
    "body": ["useMemo(() => ${1:first}, [${2:second}])"],
    "scope": "typescriptreact,javascriptreact"
  },
  "useReducer": {
    "prefix": "useReducerSnippet",
    "body": [
      "const [state, dispatch] = useReducer(${1:first}, ${2:second}, ${3:third})"
    ],
    "scope": "typescriptreact,javascriptreact"
  },
  "useRef": {
    "prefix": "useRefSnippet",
    "body": ["const ${1:first} = useRef(${2:second})"],
    "scope": "typescriptreact,javascriptreact"
  },
  "useState": {
    "prefix": "useStateSnippet",
    "body": [
      "const [${1:first}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:second})"
    ],
    "scope": "typescriptreact,javascriptreact"
  },
}